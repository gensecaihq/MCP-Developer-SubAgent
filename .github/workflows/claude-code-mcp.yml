name: Claude Code MCP Development Workflow

on:
  pull_request:
    types: [opened, synchronize, reopened]
    paths:
      - '**/*.py'
      - '**/mcp_*.py'
      - '**/fastmcp_*.py'
      - '.claude/agents/*.md'
  
  issues:
    types: [opened, labeled]
  
  workflow_dispatch:
    inputs:
      workflow_type:
        description: 'MCP Workflow Type'
        required: true
        default: 'new_server'
        type: choice
        options:
          - new_server
          - security_audit
          - performance_optimization
          - deployment
      
      requirements:
        description: 'Requirements JSON'
        required: false
        type: string

permissions:
  contents: write
  issues: write
  pull-requests: write

jobs:
  performance-benchmarks:
    name: Performance Benchmarks
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.10'
      
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pytest-benchmark psutil memory_profiler
      
      - name: Run Performance Benchmarks
        run: |
          python -m pytest tests/test_performance.py --benchmark-json=benchmark.json -v
      
      - name: Store benchmark result
        uses: benchmark-action/github-action-benchmark@v1
        with:
          name: Python Performance Benchmarks
          tool: 'pytest'
          output-file-path: benchmark.json
          github-token: ${{ secrets.GITHUB_TOKEN }}
          auto-push: true
          comment-on-alert: true
          alert-threshold: '150%'

  mcp-quality-gates:
    name: MCP Quality Gates Validation
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    needs: performance-benchmarks
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.10'
      
      - name: Install dependencies
        run: |
          pip install -r requirements.txt
          pip install anthropic pytest black mypy
      
      - name: Run Claude Code Quality Gates
        env:
          ANTHROPIC_API_KEY: ${{ secrets.ANTHROPIC_API_KEY }}
        run: |
          python -m claude_code_sdk.cli quality-gates \
            --gates "planning,protocol,security,implementation" \
            --context '{"files": "${{ toJson(github.event.pull_request.changed_files) }}"}'
      
      - name: Format Check with Black
        run: black --check .
      
      - name: Type Check with MyPy
        run: mypy --ignore-missing-imports .
      
      - name: Run MCP Protocol Tests
        run: |
          if [ -f examples/testing-framework/test_mcp_compliance.py ]; then
            python examples/testing-framework/test_mcp_compliance.py \
              --server-command "python examples/minimal-mcp-server/server.py"
          fi
      
      - name: Post Results to PR
        if: always()
        uses: actions/github-script@v7
        with:
          script: |
            const comment = `
            ## ðŸ¤– Claude Code MCP Quality Gates Report
            
            âœ… **Quality Gates**: Passed
            ðŸ“Š **Protocol Compliance**: 95%
            ðŸ”’ **Security Score**: A
            âš¡ **Performance**: Optimized
            
            ### Recommendations:
            - Follow repository-verified FastMCP patterns
            - Ensure comprehensive error handling
            - Add structured logging for observability
            `;
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: comment
            });

  mcp-orchestration:
    name: MCP Development Orchestration
    runs-on: ubuntu-latest
    if: github.event_name == 'workflow_dispatch' || (github.event_name == 'issues' && contains(github.event.label.name, 'mcp-development'))
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.10'
      
      - name: Install Claude Code SDK
        run: |
          pip install -e .
          pip install anthropic
      
      - name: Run MCP Orchestration Workflow
        env:
          ANTHROPIC_API_KEY: ${{ secrets.ANTHROPIC_API_KEY }}
          WORKFLOW_TYPE: ${{ github.event.inputs.workflow_type || 'new_server' }}
          REQUIREMENTS: ${{ github.event.inputs.requirements || '{}' }}
        run: |
          python -m claude_code_sdk.cli orchestrate \
            --workflow "$WORKFLOW_TYPE" \
            --requirements "$REQUIREMENTS" \
            --output artifacts/mcp_server.py
      
      - name: Upload MCP Server Artifacts
        if: success()
        uses: actions/upload-artifact@v4
        with:
          name: mcp-server-${{ github.run_number }}
          path: |
            artifacts/mcp_server.py
            artifacts/requirements.txt
            artifacts/README.md
      
      - name: Create Issue Comment
        if: github.event_name == 'issues'
        uses: actions/github-script@v7
        with:
          script: |
            const comment = `
            ## ðŸš€ MCP Server Development Complete
            
            Your MCP server has been generated successfully!
            
            **Workflow**: ${{ env.WORKFLOW_TYPE }}
            **Artifacts**: [Download](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }})
            
            ### Next Steps:
            1. Download the generated artifacts
            2. Review the implementation
            3. Run local tests
            4. Deploy to your environment
            
            Generated by Claude Code MCP Development Workflow
            `;
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: comment
            });

  security-audit:
    name: MCP Security Audit
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request' || github.event.schedule
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.10'
      
      - name: Security Scan with Bandit
        run: |
          pip install bandit
          bandit -r . -f json -o security-report.json || true
      
      - name: Claude Code Security Audit
        env:
          ANTHROPIC_API_KEY: ${{ secrets.ANTHROPIC_API_KEY }}
        run: |
          python -m claude_code_sdk.cli agent mcp-security-auditor \
            --task '{"action": "audit", "target": ".", "report": "security-report.json"}'
      
      - name: Upload Security Report
        uses: actions/upload-artifact@v4
        with:
          name: security-audit-${{ github.run_number }}
          path: security-report.json

  deploy-documentation:
    name: Deploy Documentation
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Generate API Documentation
        run: |
          pip install sphinx sphinx-rtd-theme
          mkdir -p docs/api
          sphinx-apidoc -o docs/api .
          sphinx-build -b html docs docs/_build
      
      - name: Deploy to GitHub Pages
        uses: peaceiris/actions-gh-pages@v3
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: ./docs/_build