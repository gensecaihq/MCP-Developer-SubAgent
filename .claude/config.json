{
  "agents": {
    "context-manager": {
      "path": "subagents/context-manager.md",
      "description": "Manages context and state across MCP development sessions, coordinates multi-agent workflows",
      "model": "sonnet",
      "auto_activate_patterns": [
        "**/CONTEXT.md",
        "**/context.json",
        "**/session_*.md"
      ],
      "preferred_for": [
        "context management",
        "state preservation",
        "multi-agent coordination",
        "decision tracking",
        "workflow continuity"
      ]
    },
    "mcp-orchestrator": {
      "path": "subagents/mcp-orchestrator.md",
      "description": "Central coordinator for MCP development workflows with quality gates and specialist delegation",
      "model": "opus",
      "auto_activate_patterns": [
        "**/mcp_server.py",
        "**/fastmcp_*.py",
        "**/*mcp*.py",
        "**/server.py",
        "**/transport_*.py",
        "**/mcp/**/*.py"
      ],
      "preferred_for": [
        "mcp development coordination",
        "quality gate management",
        "workflow orchestration",
        "architecture planning"
      ]
    },
    "mcp-protocol-expert": {
      "path": "subagents/mcp-protocol-expert.md",
      "description": "Deep MCP protocol specification expertise for JSON-RPC, transport layers, and capability negotiation",
      "model": "sonnet",
      "auto_activate_patterns": [
        "**/protocol*.py",
        "**/jsonrpc*.py",
        "**/transport*.py",
        "**/capability*.py"
      ],
      "preferred_for": [
        "mcp protocol details",
        "json-rpc implementation",
        "transport layer issues",
        "capability negotiation",
        "protocol debugging"
      ]
    },
    "fastmcp-specialist": {
      "path": "subagents/fastmcp-specialist.md",
      "description": "FastMCP framework implementation expert for Python MCP servers, decorators, and Pydantic integration",
      "model": "sonnet",
      "auto_activate_patterns": [
        "**/fastmcp_*.py",
        "**/*fastmcp*.py",
        "**/@mcp*.py",
        "**/requirements.txt"
      ],
      "preferred_for": [
        "fastmcp implementation",
        "python mcp servers",
        "decorators and typing",
        "pydantic integration",
        "async patterns"
      ]
    },
    "mcp-security-auditor": {
      "path": "subagents/mcp-security-auditor.md",
      "description": "Enterprise MCP security specialist for OAuth 2.1, input validation, and security boundary analysis",
      "model": "opus",
      "auto_activate_patterns": [
        "**/auth*.py",
        "**/security*.py",
        "**/oauth*.py",
        "**/jwt*.py"
      ],
      "preferred_for": [
        "oauth implementation",
        "security auditing",
        "input validation",
        "authentication patterns",
        "authorization design"
      ]
    },
    "mcp-performance-optimizer": {
      "path": "subagents/mcp-performance-optimizer.md",
      "description": "MCP server performance optimization specialist for async patterns, connection pooling, and monitoring",
      "model": "sonnet",
      "auto_activate_patterns": [
        "**/performance*.py",
        "**/async*.py",
        "**/pool*.py",
        "**/cache*.py",
        "**/monitoring*.py"
      ],
      "preferred_for": [
        "performance optimization",
        "async patterns",
        "connection pooling",
        "caching strategies",
        "monitoring integration"
      ]
    },
    "mcp-deployment-specialist": {
      "path": "subagents/mcp-deployment-specialist.md",
      "description": "Enterprise MCP deployment and infrastructure specialist",
      "model": "sonnet",
      "auto_activate_patterns": [
        "**/docker*.py",
        "**/k8s*.py",
        "**/deployment*.py",
        "**/infrastructure*.py",
        "Dockerfile",
        "docker-compose.yml",
        "**/k8s/**/*.yaml"
      ],
      "preferred_for": [
        "enterprise deployment",
        "container orchestration",
        "infrastructure setup",
        "production operations",
        "scaling strategies"
      ]
    },
    "mcp-debugger": {
      "path": "subagents/mcp-debugger.md",
      "description": "MCP troubleshooting and debugging specialist",
      "model": "sonnet",
      "auto_activate_patterns": [
        "**/debug*.py",
        "**/test*.py",
        "**/logs/*.log",
        "**/troubleshoot*.py"
      ],
      "preferred_for": [
        "debugging mcp issues",
        "troubleshooting errors",
        "diagnostic analysis",
        "testing strategies"
      ]
    }
  },
  "project_settings": {
    "mcp_development": {
      "default_agent": "mcp-orchestrator",
      "agent_delegation": true,
      "auto_suggestions": true,
      "verification_mode": "strict",
      "accuracy_warnings": true,
      "repository_verification": true,
      "quality_gates_enabled": true,
      "auto_activation_enabled": true
    },
    "model_selection": {
      "strategy": "complexity_based",
      "opus_agents": [
        "mcp-orchestrator",
        "mcp-security-auditor"
      ],
      "sonnet_agents": [
        "context-manager",
        "mcp-protocol-expert",
        "fastmcp-specialist", 
        "mcp-performance-optimizer",
        "mcp-deployment-specialist",
        "mcp-debugger"
      ],
      "rationale": {
        "opus": "Complex reasoning: workflow orchestration, critical security decisions, enterprise architecture",
        "sonnet": "Standard complexity: technical implementation, analysis, optimization, and coordination"
      }
    },
    "knowledge_sources": {
      "fastmcp_repo": "https://github.com/jlowin/fastmcp",
      "mcp_protocol_repo": "https://github.com/modelcontextprotocol",
      "mcp_specification": "https://modelcontextprotocol.io/",
      "verification_required": true,
      "academic_rigor": true
    },
    "error_handling": {
      "fallback_behaviors": true,
      "graceful_degradation": true,
      "unknown_api_warnings": true,
      "specification_verification": true,
      "repository_cross_reference": true
    },
    "quality_gates": {
      "planning_gate": true,
      "protocol_gate": true,
      "security_gate": true,
      "implementation_gate": true,
      "testing_gate": true,
      "performance_gate": true,
      "documentation_gate": true
    },
    "context_detection": {
      "mcp_protocol": ["JSON-RPC", "capability", "transport", "stdio", "sse", "http"],
      "fastmcp": ["@mcp.tool", "@mcp.resource", "@mcp.prompt", "FastMCP", "pydantic"],
      "enterprise": ["oauth", "jwt", "security", "auth", "enterprise"],
      "performance": ["async", "await", "pool", "cache", "optimization"],
      "deployment": ["docker", "kubernetes", "container", "deploy", "production"]
    }
  }
}